#!/usr/bin/env python3
"""
Description: Generates system wide secrets containing all potential regions
Use: Once per ecosystem of devices
"""

import json
import secrets
from argparse import ArgumentParser

KEYSIZE = 256

def gen_keys():
    key1b = secrets.token_hex(KEYSIZE // 16)
    key2b = secrets.token_hex(KEYSIZE // 16)
    key3b = secrets.token_hex(KEYSIZE // 16)
    return {'key1b':key1b,'key2b':key2b,'key3b':key3b}

def main(region_dict, outfile):
    """writes region secrets to json file
    args:
        region_dict (dict): dict of region:rid pairs
        outfile (string): name of file to write region_secrets to
    """
    try:
        region_secrets = open(outfile, "w")
    except Exception as e:
        print("Unable to open secrets file: %s" % (e,))
        return 0
    keys_b = gen_keys()
    info = json.dumps({'keys_b':keys_b,'region_dict':region_dict})
    region_secrets.write(info)
    region_secrets.close()

def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--region-list', help='list of regions for provisioning purposes',
                        required=True, nargs='+')
    parser.add_argument('--outfile', help='file to save region secrets to', required=True)
    args = parser.parse_args()
    return args.region_list, args.outfile

if __name__ == '__main__':
    region_list, loc = get_args()
    print("generating region secrets")
    regions = {region: num for num, region in enumerate(region_list)}  # Create region IDs based on increasing integers
    main(regions, loc)
