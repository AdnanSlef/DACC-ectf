#!/usr/bin/env python3
"""
Description: Protects song by adding metadata, encryption, and integrity checks
Use: Once per song
"""
import json
import struct
import os
import wave
from argparse import ArgumentParser
import numpy as np
from crypto import *  #crypto.py


def protect(infile, outfile, md, key1, key2, key3):
    cipher = Cipher(int(key1,16))
    
    with open(os.path.abspath(args.infile),'rb') as song:
        plaintext = song.read()
        
    ciphertext = cipher.encrypt(plaintext)
    extra = bytes([len(plaintext)%16])
    iv = cipher.iv.to_bytes(16,'big')
    mac_c = sha(sha(ciphertext)+int(key2,16).to_bytes(32,'big'))
    mac_md = sha(sha(md+extra+iv)+int(key3,16).to_bytes(32,'big'))

    with open(os.path.abspath(args.outfile),'wb') as drm:
        drm.write(mac_md)
        drm.write(md)
        drm.write(extra)
        drm.write(iv)
        drm.write(mac_c)
        drm.write(ciphertext)


def create_metadata(regions, user, region_secrets, user_secrets):
    """Returns a byte string formatted as follows:
    ownerID(1B)/REGION_LEN(1B)/USER_LEN(1B)/REGIONID1(1B)/REGIONID2 (1B)/.../NULL (63s)
    Args:
        regions (list): list of regions to provision song for
        user (string): user name for owner of the song
        region_secrets (dict): mapping of regions provided by region.secrets
        user_secrets (dict): mapping of users provided by user.secrets
    Returns:
        metadata (bytes): bytes of encoded metadata
    Example:
        >>create_metadata(['USA', 'Canada'], 'user1', {'USA': 1, 'Canada': 2}, {'user1': {'pin': '12345678', 'id': 0}})
        b'\x00\x02\x00\x01\x02'+b'\x00'*(64-2+63)
    """
    return struct.pack(
        '=3B64s63s',
        int(user_secrets[user]['id']), len(regions), 0,
        bytes([region_secrets[str(r)] for r in regions]),
        b'')


def make_keys(keys_a, keys_b):
    """Combines key halves into whole keys"""
    keys = [keys_a['key'+str(i+1)+'a']+keys_b['key'+str(i+1)+'b']for i in range(len(keys_a))]
    return keys


def main():
    parser = ArgumentParser(description='main interface to protect songs')
    parser.add_argument('--region-list', nargs='+', help='List of regions song can be played in', required=True)
    parser.add_argument('--owner', help='Owner of song', required=True)
    parser.add_argument('--region-secrets-path', help='File location for the region secrets file', required=True)
    parser.add_argument('--user-secrets-path', help='File location for the user secrets file', required=True)
    parser.add_argument('--infile', help='Path to unprotected song', required=True)
    parser.add_argument('--outfile', help='Path to save the protected song', required=True)
    args = parser.parse_args()

    regions_json = json.load(open(os.path.abspath(args.region_secrets_path)))
    users_json = json.load(open(os.path.abspath(args.user_secrets_path)))
    
    region_secrets = regions_json['region_dict']
    user_secrets = users_json['user_dict']

    try:
        metadata = create_metadata(args.region_list, args.owner, region_secrets, user_secrets)
    except ValueError:
        raise ValueError('Ensure all user IDs are integers and all regions are in the provided region.secrets')

    keys_a = users_json['keys_a']
    keys_b = regions_json['keys_b']
    key1, key2, key3 = make_keys(keys_a, keys_b)
    
    protect(args.infile, args.outfile, metadata, key1, key2, key3)


if __name__ == '__main__':
    main()
