#!/usr/bin/env python3
"""
Description: Unprotects song by removing metadata, decrypting, and removing integrity checks
Use: Once per song
"""
import json
import struct
import os
import wave
from argparse import ArgumentParser
import numpy as np
from crypto import *  #crypto.py


def unprotect(infile, outfile, key1):
    with open(os.path.abspath(infile),'rb') as protected:
        contents = protected.read()
    
    extra = contents[162]
    iv = contents[163:179]
    ciphertext = contents[211:]
    
    cipher = Cipher(int(key1,16),int.from_bytes(iv,'big'))

    with open(os.path.abspath(outfile),'wb') as unprotected:
        unprotected.write(cipher.decrypt(ciphertext,extra))

        
def main():
    parser = ArgumentParser(description='program to unprotect songs')
    parser.add_argument('--region-secrets-path', help='File location for the region secrets file', required=True)
    parser.add_argument('--user-secrets-path', help='File location for the user secrets file', required=True)
    parser.add_argument('--infile', help='Path to protected song', required=True)
    parser.add_argument('--outfile', help='Path to save the unprotected song', required=True)
    args = parser.parse_args()

    regions_json = json.load(open(os.path.abspath(args.region_secrets_path)))
    users_json = json.load(open(os.path.abspath(args.user_secrets_path)))
    
    keys_a = users_json['keys_a']
    keys_b = regions_json['keys_b']
    key1 = keys_a['key1a']+keys_b['key1b']
    
    unprotect(args.infile,args.outfile,key1)

    
if __name__=='__main__':
    main()
